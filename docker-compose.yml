services:
  db:
    container_name: db
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "$POSTGRES_USER",
          "-d",
          "$POSTGRES_DB"
        ]
      interval: 5s
      timeout: 3s
      retries: 5

  django:
    image: django
    tty: true
    container_name: django
    build: ./django
    depends_on:
      db:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_DB_NAME: ${POSTGRES_DB}
      DJANGO_DB_USER: ${POSTGRES_USER}
      DJANGO_DB_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_DB_HOST: ${DJANGO_DB_HOST}
      DJANGO_DB_PORT: ${DJANGO_DB_PORT}
      FT_CLIENT: ${FT_CLIENT}
      FT_SECRET: ${FT_SECRET}
    networks:
      - app
    volumes:
      - django-data:/django
    ports:
      - 8000:8000
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f localhost:8000/metrics || exit 1"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 3

  redis:
    container_name: redis
    image: redis:7.2.5-alpine
    networks:
      - app
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    networks:
      - app
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    # depends_on:
    #   django:
    #     condition: service_healthy
    networks:
      - app
    # ports:
    #   - 9090:9090
    expose:
      - 9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    restart: unless-stopped
  caddy:
    image: caddy
    container_name: caddy
    depends_on:
      django:
        condition: service_started
    build: ./caddy
    volumes:
      - django-data:/django
    networks:
      - app
    ports:
      - 80:80
      - 443:443
    restart: always

networks:
  app:
    name: app
    driver: bridge

volumes:
  db-data:
    name: db-data
    driver: local
  django-data:
    name: django-data
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/django
      o: bind
  grafana-data: {}
  prometheus-data: {}
